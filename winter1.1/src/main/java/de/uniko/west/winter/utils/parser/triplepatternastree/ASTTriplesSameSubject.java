/*

The WINTER-API is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The WINTER-API is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the WINTER-API.  If not, see <http://www.gnu.org/licenses/>.

*/

/* Generated By:JJTree: Do not edit this line. ASTTriplesSameSubject.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.uniko.west.winter.utils.parser.triplepatternastree;

import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParser;
import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParserVisitor;
import de.uniko.west.winter.utils.parser.triplepatternparser.VisitorException;

public
class ASTTriplesSameSubject extends SimpleNode {
	public ASTTriplesSameSubject(int id) {
		super(id);
	}

	public ASTTriplesSameSubject(SPARQLPatternParser p, int id) {
		super(p, id);
	}


	/** Accept the visitor. **/
	public Object jjtAccept(SPARQLPatternParserVisitor visitor, Object data) throws VisitorException {
		return visitor.visit(this, data);
	}

	public boolean jjtReplaceSubject(SimpleNode subject){
		if(subject.getClass() == ASTVar.class || subject.getClass() == ASTIRI.class){
			subject.jjtSetParent(this);
			jjtAddChild(subject, 0);
			return true;
		}else{
			return false;
		}
	} 

	public ASTTriplesSameSubject jjtClone(){
		logger.debug("Cloning {}", this);
		ASTTriplesSameSubject clone =  new ASTTriplesSameSubject(this.id);
		logger.debug("Setting Parent {}", this.parent);
		clone.jjtSetParent(this.parent);
		if (children != null){
			logger.debug("{} children found for {} cloning them", children.length, this);
			for (int i = 0; i < children.length; i++){
				logger.debug("Cloning {} child {}", i, children[i]);
				Node childClone = children[i].jjtClone();
				clone.jjtAddChild(childClone, i);
			}
		}else logger.debug("No children found for {}", this);
		return clone;
	}

	/**
	 * Cloning {@link ASTTriplesSameSubject} without parents and children
	 */
	@Override
	public ASTTriplesSameSubject jjtFlatClone(){
		logger.debug("Cloning {}...", this);
		ASTTriplesSameSubject clone = new ASTTriplesSameSubject(this.id);
		return clone;
	}

	@Override
	public boolean jjtCompareTo(Node node) {
		boolean result;
		ASTTriplesSameSubject TSSNode = null;
		if(this.getClass()==node.getClass()){
			TSSNode = (ASTTriplesSameSubject)node;
			if(this.jjtGetNumChildren()==TSSNode.jjtGetNumChildren()){
				if(this.jjtGetNumChildren()!=0){
					for(int i = 0;i<this.jjtGetNumChildren();i++){
						result = this.jjtGetChild(i).jjtCompareTo(TSSNode.jjtGetChild(i));
						if(result){
							continue;
						} else
							return false;
					}
					return true;
				} else
					return true;
			} else 
				return false;
		} else
			return false;
	}
}
/* JavaCC - OriginalChecksum=6487dbe8b98a373d63085e11732d22b6 (do not edit this line) */
