/*

The WINTER-API is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The WINTER-API is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the WINTER-API.  If not, see <http://www.gnu.org/licenses/>.

*/

/* Generated By:JJTree: Do not edit this line. ASTRDFLiteral.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.uniko.west.winter.utils.parser.triplepatternastree;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParser;
import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParserVisitor;
import de.uniko.west.winter.utils.parser.triplepatternparser.VisitorException;

public
class ASTRDFLiteral extends SimpleNode {
	
	protected static transient Logger logger = LoggerFactory.getLogger(ASTRDFLiteral.class.getName());
    private String lang;
	
  public ASTRDFLiteral(int id) {
    super(id);
  }

  public ASTRDFLiteral(SPARQLPatternParser p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(SPARQLPatternParserVisitor visitor, Object data) throws VisitorException {
    return visitor.visit(this, data);
  }
  
  public String getLang() {
      return lang;
  }

  public void setLang(String lang) {
      this.lang = lang;
  }

  public ASTString getLabel() {
      return (ASTString)children[0];
  }

  public void setLabel(ASTString label) {
	  jjtAddChild(label, 0);
  }
  
  public SimpleNode getDatatype() {
      if (children.length >= 2) {
//    	  System.out.println(children.length);
//    	  System.out.println(children[0].getClass());
//    	  System.out.println(((ASTQName)children[1]).getValue());
//    	  System.out.println(children[2].getClass());
          if (children[1].getClass() == ASTQName.class) return (ASTQName)children[1];
          if (children[1].getClass().equals(ASTIRI.class)) return (ASTIRI)children[1];
      }
      return null;
  }

  public void setDatatype(SimpleNode datatype){
	  if(datatype.getClass() == ASTQName.class || datatype.getClass() == ASTIRI.class){
		  jjtAddChild(datatype, 1);
	  }else{
		  //TODO: add error handling
	  }
  }
  
  @Override
  public String toString() {
      String result = super.toString();

      if (lang != null) {
          result += " (lang=" + lang + ")";
      }

      return result;
  }

  public String dumpToString(boolean samePredicateFlag, boolean sameSubjectFlag) {
	  logger.debug("Dumping {} with {} children and SAMESUB {}, SAMEPRED {}",new Object[]{ this.toString(), children.length, sameSubjectFlag, samePredicateFlag});
	  String dump = "";
//	  if (parent.getClass() == ASTObjectList.class && parent.jjtGetNumChildren() > 1) samePredicateFlag = true;
	  if(children != null){
		  for (int i = 0; i < children.length; ++i) {
			  SimpleNode n = (SimpleNode)children[i];
			  if(n != null) {
				  dump += n.dumpToString(samePredicateFlag, sameSubjectFlag);
			  }
		  }
	  }
	  logger.debug("Adding COMMA/SEMICOLON/DOT with SAMESUB {}, SAMEPRED {}",new Object[]{sameSubjectFlag, samePredicateFlag});
	  if (samePredicateFlag) {
		  dump += ", ";
	  }else {
		  if(sameSubjectFlag) {
			  dump += "; \n";
		  }else{
			  dump += ". \n";  
		  } 
	  }
	  logger.debug("Dumping {}", dump);
	  return dump;
  }
  
  @Override
  public ASTRDFLiteral jjtClone(){
	logger.debug("Cloning {}", this);
	ASTRDFLiteral clone =  new ASTRDFLiteral(this.id);
	logger.debug("Setting Parent {}", this.parent);
	clone.jjtSetParent(this.parent);
	clone.lang = this.lang;
	if (children != null){
		logger.debug("{} children found for {} cloning them", children.length, this);
		for (int i = 0; i < children.length; i++){
			logger.debug("Cloning {} child {}", i, children[i]);
			Node childClone = children[i].jjtClone();
			clone.jjtAddChild(childClone, i);
		}
	}else logger.debug("No children found for {}", this);
	return clone;
	  
  }
  
  @Override
  public boolean jjtCompareTo(Node node) {
  	ASTRDFLiteral literalNode = null;
  	if(this.getClass()==node.getClass()){
  		literalNode = (ASTRDFLiteral)node;
  		if(this.jjtGetNumChildren()==literalNode.jjtGetNumChildren() &&
  				this.getLang().equals(literalNode.getLang())){
  			return true;
  		} else 
  			return false;
  	} else
  		return false;
  }
}
/* JavaCC - OriginalChecksum=5012269fd9badb9670cdca4cc3f678e9 (do not edit this line) */
