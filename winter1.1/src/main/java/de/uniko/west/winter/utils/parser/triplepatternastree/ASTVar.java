/*

The WINTER-API is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The WINTER-API is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the WINTER-API.  If not, see <http://www.gnu.org/licenses/>.

*/

/* Generated By:JJTree: Do not edit this line. ASTVar.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.uniko.west.winter.utils.parser.triplepatternastree;

import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParser;
import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParserVisitor;
import de.uniko.west.winter.utils.parser.triplepatternparser.VisitorException;

public
class ASTVar extends SimpleNode {


    private String name;

    private boolean anonymous;


  public ASTVar(int id) {
    super(id);
  }

  public ASTVar(SPARQLPatternParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(SPARQLPatternParserVisitor visitor, Object data) throws VisitorException {
    return visitor.visit(this, data);
  }
  

  public String getName() {
      return name;
  }

  public void setName(String name) {
      this.name = name;
  }

  public boolean isAnonymous() {
      return anonymous;
  }

  public void setAnonymous(boolean anonymous) {
      this.anonymous = anonymous;
  }

  @Override
  public String toString() {
      return super.toString() + " (" + name + ")";
  }

  public String dumpToString(boolean samePredicateFlag, boolean sameSubjectFlag) {
	  String dump = "?"+name+" ";
	  if (parent.getClass() == ASTObjectList.class){
		  if (samePredicateFlag) dump = "?"+name+", ";
		  else {
			  if (sameSubjectFlag) dump = "?"+name+"; \n";
			  else dump = "?"+name+". \n";
		  }
	  }
	  
	  if(children != null){
		  for (int i = 0; i < children.length; ++i) {
			  SimpleNode n = (SimpleNode)children[i];
			  if(n != null) {
				  dump += n.dumpToString(samePredicateFlag, sameSubjectFlag);
			  }
		  }
	  }
	  logger.debug("Dumping {}",dump);
	  return dump;
  }
  
  @Override
  public ASTVar jjtClone(){
	logger.debug("Cloning {}", this);
	ASTVar clone =  new ASTVar(this.id);
	logger.debug("Setting Parent {}", this.parent);
	clone.jjtSetParent(this.parent);
	clone.name = this.name;
	clone.anonymous = this.anonymous;
	if (children != null){
		logger.debug("{} children found for {} cloning them", children.length, this);
		for (int i = 0; i < children.length; i++){
			logger.debug("Cloning {} child {}", i, children[i]);
			Node childClone = children[i].jjtClone();
			clone.jjtAddChild(childClone, i);
		}
	}else logger.debug("No children found for {}", this);
	return clone; 
  }
  
  @Override
  public boolean jjtCompareTo(Node node) {
  	ASTVar varNode = null;
  	if(this.getClass()==node.getClass()){
  		varNode = (ASTVar)node;
  		if(this.jjtGetNumChildren()==varNode.jjtGetNumChildren() &&
  				this.getName().equals(varNode.getName()) &&
  				this.isAnonymous()==varNode.isAnonymous()){
  			return true;
  		} else 
  			return false;
  	} else
  		return false;
  }
}
/* JavaCC - OriginalChecksum=f808f30ee74825358e2f63e205d86e5a (do not edit this line) */
