/*

The WINTER-API is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The WINTER-API is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the WINTER-API.  If not, see <http://www.gnu.org/licenses/>.

*/

/* Generated By:JJTree: Do not edit this line. ASTQueryContainer.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.uniko.west.winter.utils.parser.triplepatternastree;

import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParser;
import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParserVisitor;
import de.uniko.west.winter.utils.parser.triplepatternparser.VisitorException;
import de.uniko.west.winter.utils.visitors.BuildTreeViewPatternVisitor;

public
class ASTQueryContainer extends SimpleNode {
	public ASTQueryContainer(int id) {
		super(id);
	}

	public ASTQueryContainer(SPARQLPatternParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(SPARQLPatternParserVisitor visitor, Object data) throws VisitorException {
		return visitor.visit(this, data);
	}
	/**
  public ASTBaseDecl getBaseDecl() {
      return super.jjtGetChild(ASTBaseDecl.class);
  }

  public List<ASTPrefixDecl> getPrefixDeclList() {
      return super.jjtGetChildren(ASTPrefixDecl.class);
  }

  public ASTQuery getQuery() {
      return super.jjtGetChild(ASTQuery.class);
  }
	 **/
	
	/**
	 * Cloning {@link ASTQueryContainer} without parent and children
	 */
	@Override
	public ASTQueryContainer jjtFlatClone(){
		logger.debug("Cloning {}...", this);
		ASTQueryContainer clone = new ASTQueryContainer(this.id);
		return clone;
	}

	@Override
	public boolean jjtCompareTo(Node node) {
		boolean result;
		ASTQueryContainer qContainerNode = null;
		if(this.getClass()==node.getClass()){
			qContainerNode = (ASTQueryContainer)node;
			if(this.jjtGetNumChildren()==qContainerNode.jjtGetNumChildren()){
				if(this.jjtGetNumChildren()!=0){
					for(int i = 0;i<this.jjtGetNumChildren();i++){
						result = this.jjtGetChild(i).jjtCompareTo(qContainerNode.jjtGetChild(i));
						if(result){
							continue;
						} else
							return false;
					}
					return true;
				} else
					return true;
			} else 
				return false;
		} else
			return false;
	}
}
/* JavaCC - OriginalChecksum=d255e815cb729e97baedd3b6d6c0870e (do not edit this line) */
