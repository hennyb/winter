/*

The WINTER-API is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The WINTER-API is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the WINTER-API.  If not, see <http://www.gnu.org/licenses/>.

*/

/* Generated By:JJTree: Do not edit this line. ASTBlankNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package de.uniko.west.winter.utils.parser.triplepatternastree;

import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParser;
import de.uniko.west.winter.utils.parser.triplepatternparser.SPARQLPatternParserVisitor;
import de.uniko.west.winter.utils.parser.triplepatternparser.VisitorException;

public
class ASTBlankNode extends SimpleNode {
	
    private String id;

  public ASTBlankNode(int id) {
    super(id);
  }

  public ASTBlankNode(SPARQLPatternParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(SPARQLPatternParserVisitor visitor, Object data) throws VisitorException {
    return visitor.visit(this, data);
  }
  

  public String getID() {
      return id;
  }

  public void setID(String id) {
      this.id = id;
  }

  @Override
  public String toString() {
      return super.toString() + " (" + id + ")";
  }
  
  @Override
  public boolean jjtCompareTo(Node node) {
  	ASTBlankNode blankNode = null;
  	if(this.getClass()==node.getClass()){
  		blankNode = (ASTBlankNode)node;
  		if(this.jjtGetNumChildren()==blankNode.jjtGetNumChildren() &&
  				this.getID().equals(blankNode.getID())){
  			return true;
  		} else 
  			return false;
  	} else
  		return false;
  }
  
  @Override
  public ASTBlankNode jjtClone(){
	logger.debug("Cloning {}", this);
	ASTBlankNode clone =  new ASTBlankNode(((SimpleNode)this).id);
	logger.debug("Setting Parent {}", this.parent);
	clone.jjtSetParent(this.parent);
	clone.id = this.id;
	if (children != null){
		logger.debug("{} children found for {} cloning them", children.length, this);
		for (int i = 0; i < children.length; i++){
			logger.debug("Cloning {} child {}", i, children[i]);
			Node childClone = children[i].jjtClone();
			clone.jjtAddChild(childClone, i);
		}
	}else logger.debug("No children found for {}", this);
	return clone; 
  }

}
/* JavaCC - OriginalChecksum=1e0127c5d4d0095a2fbcf2c992b77141 (do not edit this line) */
